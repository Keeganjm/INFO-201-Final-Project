# Your script for Part 1 goes here (and delete this comment!)
# Your script for Part 1 goes here (and delete this comment!)
# Your script for Part 1 goes here (and delete this comment!)
# Your script for Part 1 goes here (and delete this comment!)
# Your script for Part 1 goes here (and delete this comment!)
# Your script for Part 1 goes here (and delete this comment!)
my.age <- 18
source('~/Documents/INFO/INFO 201/a2-core-skills-Keeganjm/Assignment.R')
source('~/Documents/INFO/INFO 201/a2-core-skills-Keeganjm/Assignment.R')
my.intro <- MakeIntroduction(my.name, my.age)
print(my.intro)
casual.intro <- sub("Hello, my name is", "Hey, I\'m", my.intro)
print(casual.intro)
# install.packages('stringr')
library(stringr)
source('~/Documents/INFO/INFO 201/a2-core-skills-Keeganjm/Assignment.R')
books <- c("Mistborn", "The Stormlight Archive", "Wax and Wayne", "The Ranger\'s Apprentice", "The Brotherband Chronicles", "Percy Jackson and the Olympians")
top.three.books <- books[1:3]
top.three.books <- books[1:3]
print(top.three.books)
print(top.three.books)
book.reviews <-paste(books, 'is a great read!', sep = ' ')
print book.reviews
print(book.reviews)
RemoveBook <- function(books, index) {
return(books[-index])
}
books.without.four <- RemoveBook(books, 4)
print(books.without.four)
long.titles <- books[str_length(books) > 15]
print(long.titles)
numbers <- seq(1,201)
print(numbers)
numbers.squared <- numbers * numbers
print(numbers.squared)
squared.mean <- mean(numbers.squared)
print(squared.mean)
squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(squares)
spring.break <- as.Date('2018-03-17')
today <- as.Date(Sys.Date())
days.to.break <- spring.break - today
print(days.to.break)
MakeBirthdayIntro <- function(name, age, birthday) {
paste(MakeIntroduction(name, age), 'In', days.to.break, 'days I\'ll be', age + 1, sep=' ')
}
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, as.Date('2018-01-27'))
print(my.bday.intro)
MakeBirthdayIntro <- function(name, age, birthday) {
today <- as.Date(Sys.Date())
days.to.bday <- birthday - today
if (days.to.bday < 0) {
days.to.bday <- days.to.bday + 365
}
paste(MakeIntroduction(name, age), 'In', days.to.bday, 'days I\'ll be', age + 1, sep=' ')
}
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, as.Date('2018-01-27'))
print(my.bday.intro)
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, as.Date('2018-01-01'))
print(my.bday.intro)
source('~/Documents/INFO/INFO 201/a2-core-skills-Keeganjm/Assignment.R')
source('~/Documents/INFO/INFO 201/a2-core-skills-Keeganjm/Assignment.R')
# install.packages('stringr')
install.packages(lubridate)
# install.packages('stringr')
install.packages(lubridate)
# install.packages('stringr')
install.packages(lubridate)
library(stringr)
library(lubridate)
# install.packages('stringr')
install.packages(lubridate)
my.num <- 6
initials <- "?. ?."
my.vector <- c(my.num, initials)
# run ?sum to get more info
vector.sum <- sum(my.vector)
install.packages("stringr")
install.packages("stringr")
my.line <- "Hey, hey, this is the library"
print(str_length(my.line))
said.the.famous <- paste(my.line, " - ", initial)
# Make a vector and use typeof to check what type R considers it to be
v <- 1:5
typeof(v)
difference <- abs(str_length(v1)-str_length(v2))
# Write a function `CompareLength` that takes in 2 vectors, and returns the sentence:
# "The difference in lengths is N"
CompareLength <- function(v1, v2) {
difference <- abs(str_length(v1)-str_length(v2))
}
# Write a function `CompareLength` that takes in 2 vectors, and returns the sentence:
# "The difference in lengths is N"
CompareLength <- function(v1, v2) {
difference <- abs(str_length(v1)-str_length(v2))
return(paste("The difference in lengths is", difference))
}
print(CompareLength(v1,v2))
# Make a vector and use typeof to check what type R considers it to be
v1 <- 1:5
print(CompareLength(v1,v2))
# Pass two vectors of different length to your `CompareLength` function
v2 <- 1:3
print(CompareLength(v1,v2))
# Write a function `CompareLength` that takes in 2 vectors, and returns the sentence:
# "The difference in lengths is N"
CompareLength <- function(v1, v2) {
difference <- abs(length(v1)-length(v2))
return(paste("The difference in lengths is", difference))
}
print(CompareLength(v1,v2))
# Write a function `DescribeDifference` that will return one of the following statements:
# "Your first vector is longer by N elements"
# "Your second vector is longer by N elements"
DescribeDifference <- function(v1,v2) {
difference <- length(v1)-length(v2)
if (difference < 0) {
return(paste("Your second vector is longer by", difference, "elements"))
}
return(paste("Your first vector is longer by", abs(difference), "elements"))
}
# Pass two vectors to your `DescribeDifference` function
print(DescribeDifference(v1,v2))
print(DescribeDifference(v2,v1))
# Write a function `DescribeDifference` that will return one of the following statements:
# "Your first vector is longer by N elements"
# "Your second vector is longer by N elements"
DescribeDifference <- function(v1,v2) {
difference <- length(v1)-length(v2)
if (difference < 0) {
return(paste("Your second vector is longer by", abs(difference), "elements"))
}
return(paste("Your first vector is longer by", difference, "elements"))
}
# Pass two vectors to your `DescribeDifference` function
print(DescribeDifference(v1,v2))
print(DescribeDifference(v2,v1))
# Write a function `CombineVectors` that takes in 3 vectors and combines them into one
CombineVectors <- function(v1,v2,v3) {
return(c(v1,v2,v3))
}
# Send 3 vectors to your function to test it.
v3 <- 1:4
print(CombineVectors(v1,v2,v3))
# Write a function `CapsTime` that takes in a vector of names of courses you're taking, ex "Informatics 201" and removes all capital letters
CapsTime <- function(courses) {
return(tolower(courses))
}
print(CapsTime(courses))
courses <- c("CSE 143", "INFO 200", "INFO 201")
print(CapsTime(courses))
?sum
?lubridate
??lubridate
?stringr
# install.packages('stringr')
install.packages('lubridate')
library(lubridate)
library(lubridate)
# A formal introduction given a person's name, age, and birthday.
MakeBirthdayIntro <- function(name, age, birthday) {
today <- as.Date(Sys.Date())
days.to.bday <- birthday - today
if (days.to.bday < 0) {
new.birthday <- x %m+% years(1)
days.to.bday <- new.birthday - today
}
paste(MakeIntroduction(name, age), 'In', days.to.bday, 'days I\'ll be', age + 1, sep=' ')
}
# My intro including my birthday
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, as.Date('2018-01-27'))
print(my.bday.intro)
# My intro including my birthday
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, as.Date('2018-01-01'))
# A formal introduction given a person's name, age, and birthday.
MakeBirthdayIntro <- function(name, age, birthday) {
today <- as.Date(Sys.Date())
days.to.bday <- birthday - today
if (days.to.bday < 0) {
new.birthday <- birthday %m+% years(1)
days.to.bday <- new.birthday - today
}
paste(MakeIntroduction(name, age), 'In', days.to.bday, 'days I\'ll be', age + 1, sep=' ')
}
# My intro including my birthday
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, as.Date('2018-01-01'))
print(my.bday.intro)
# My intro including my birthday
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, as.Date('2018-01-27'))
print(my.bday.intro)
today <- as.Date(Sys.Date())
bday <- as.Date('2018-01-10')
today - bday
today - bday + 365
bday + 365
(bday + 365) - today
bday.2019 <- as.Date('2019-01-10')
bday.2019 - today
M <- matrix(nrow=6, ncol=14)
M[0,0]
m[0:4,1]
M[0:4,1]
M[1,1] <- 1
M[1,1] <- 0
OPT <- c(c(1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
c(-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
c(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
c(-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
c(-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
c(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
c(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
c(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
c(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
c(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
c(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1)
)
OPT <- c(c(1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
c(-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
c(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
c(-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
c(-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
c(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
c(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
c(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
c(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
c(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
c(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1)
)
OPT
1:(5-1)
OPT.df <- data.frame(c(1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
c(-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
c(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
c(-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
c(-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
c(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
c(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
c(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
c(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
c(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
c(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1)
)
View(OPT.df)
minWasted <- function(m,n) {
if (OPT.df[m,n] == -1) {
minSpace = m*n
for (i in 1:(m-1)) {
wastedInCut1 = minWasted(i,n) + minWasted(m-i,n)
if (wastedInCut1 < minSpace) {
minSpace = wastedInCut1
}
}
for (i in 1:(n-1)) {
wastedInCut2 = minWasted(m,j) + minWasted(m, n-j)
if (wastedInCut2 < minSpace) {
minSpace = wastedInCut2
}
}
OPT.df[m,n] = minSpace
}
return OPT.df[m,n]
}
minWasted <- function(m,n) {
if (OPT.df[m,n] == -1) {
minSpace = m*n
for (i in 1:(m-1)) {
wastedInCut1 = minWasted(i,n) + minWasted(m-i,n)
if (wastedInCut1 < minSpace) {
minSpace = wastedInCut1
}
}
for (i in 1:(n-1)) {
wastedInCut2 = minWasted(m,j) + minWasted(m, n-j)
if (wastedInCut2 < minSpace) {
minSpace = wastedInCut2
}
}
OPT.df[m,n] = minSpace
}
return OPT.df[m,n]
}
minWasted <- function(m,n) {
if (OPT.df[m,n] == -1) {
minSpace = m*n
for (i in 1:(m-1)) {
wastedInCut1 = minWasted(i,n) + minWasted(m-i,n)
if (wastedInCut1 < minSpace) {
minSpace = wastedInCut1
}
}
for (i in 1:(n-1)) {
wastedInCut2 = minWasted(m,j) + minWasted(m, n-j)
if (wastedInCut2 < minSpace) {
minSpace = wastedInCut2
}
}
OPT.df[m,n] = minSpace
}
return(OPT.df[m,n])
}
minWasted(21,11)
minWasted(11,21)
OPT.df[21,11]
OPT.df[11,21]
minWasted(21,11)
1:0
seq(1,0)
seq(1,0, 1)
minWasted <- function(m,n) {
if (OPT.df[m,n] == -1) {
minSpace = m*n
if (1 >= m-1) {
for (i in 1:(m-1)) {
wastedInCut1 = minWasted(i,n) + minWasted(m-i,n)
if (wastedInCut1 < minSpace) {
minSpace = wastedInCut1
}
}
}
if (1 >= n-1) {
for (i in 1:(n-1)) {
wastedInCut2 = minWasted(m,j) + minWasted(m, n-j)
if (wastedInCut2 < minSpace) {
minSpace = wastedInCut2
}
}
}
OPT.df[m,n] = minSpace
}
return(OPT.df[m,n])
}
minWasted(21,11)
View(OPT.df)
minWasted <- function(m,n) {
if (OPT.df[m,n] == -1) {
minSpace <- m*n
if (1 >= m-1) {
for (i in 1:(m-1)) {
wastedInCut1 <- minWasted(i,n) + minWasted(m-i,n)
if (wastedInCut1 < minSpace) {
minSpace <- wastedInCut1
}
}
}
if (1 >= n-1) {
for (i in 1:(n-1)) {
wastedInCut2 <- minWasted(m,j) + minWasted(m, n-j)
if (wastedInCut2 < minSpace) {
minSpace <- wastedInCut2
}
}
}
OPT.df[m,n] <- minSpace
}
return(OPT.df[m,n])
}
minWasted(21,11)
View(OPT.df)
minWasted <- function(m,n) {
if (OPT.df[m,n] == -1) {
minSpace <- m*n
if (1 >= m-1) {
for (i in 1:(m-1)) {
wastedInCut1 <- minWasted(i,n) + minWasted(m-i,n)
if (wastedInCut1 < minSpace) {
minSpace <- wastedInCut1
}
}
}
if (1 >= n-1) {
for (j in 1:(n-1)) {
wastedInCut2 <- minWasted(m,j) + minWasted(m, n-j)
if (wastedInCut2 < minSpace) {
minSpace <- wastedInCut2
}
}
}
OPT.df[m,n] <- minSpace
}
return(OPT.df[m,n])
}
minWasted(21,11)
OPT.df[1,1] <- 0
OPT.df[1,1] <- 1
minWasted <- function(m,n,df) {
if (df[m,n] == -1) {
minSpace <- m*n
if (1 >= m-1) {
for (i in 1:(m-1)) {
wastedInCut1 <- minWasted(i,n,df) + minWasted(m-i,n,df)
if (wastedInCut1 < minSpace) {
minSpace <- wastedInCut1
}
}
}
if (1 >= n-1) {
for (j in 1:(n-1)) {
wastedInCut2 <- minWasted(m,j,df) + minWasted(m, n-j,df)
if (wastedInCut2 < minSpace) {
minSpace <- wastedInCut2
}
}
}
df[m,n] <- minSpace
}
return(df[m,n])
}
minWasted(21,11,OPT.df)
minWasted <- function(m,n) {
if (OPT.df[m,n] == -1) {
minSpace <- m*n
if (1 >= m-1) {
for (i in 1:(m-1)) {
wastedInCut1 <- minWasted(i,n) + minWasted(m-i,n)
if (wastedInCut1 < minSpace) {
minSpace <- wastedInCut1
}
}
}
if (1 >= n-1) {
for (j in 1:(n-1)) {
wastedInCut2 <- minWasted(m,j) + minWasted(m, n-j)
if (wastedInCut2 < minSpace) {
minSpace <- wastedInCut2
}
}
}
OPT.df[m,n] <- minSpace
}
else {
minSpace <- OPT.df[m,n]
}
return(minSpace)
}
minWasted(21,11)
install.packages("twitteR")
?twitteR
library(twitteR)
?twitteR
setup_twitter_oauth("PmTJihCUOVhyB6PW3MZ8Ae4yA", "V5FmgTQje3berMTBplHipo5IEkEX40W8NluZDfhl3mroBuQdhl")
setwd("~/Documents/INFO/INFO 201/INFO-201-Final-Project")
setup_twitter_oauth("PmTJihCUOVhyB6PW3MZ8Ae4yA", "V5FmgTQje3berMTBplHipo5IEkEX40W8NluZDfhl3mroBuQdhl")
setup_twitter_oauth("PmTJihCUOVhyB6PW3MZ8Ae4yA", "V5FmgTQje3berMTBplHipo5IEkEX40W8NluZDfhl3mroBuQdhl", "966089477134286849-4SuzpqD3dsMZrUcII2cfkp0SuRbiS3b", "2hv5UOQoq28uZ1cnbPfqYNRv5sXwuM1vabRL3XqUfC5QE")
tweets <- searchTwitter('#netneutrality', n = 10)
View(tweets)
tweets <- strip_retweets(searchTwitter('#netneutrality', n = 10))
View(tweets)
warnings()
head(tweets)
tweets <- strip_retweets(searchTwitter('#netneutrality', n = 10))
head(tweets)
?searchTwitter
tweets.df <- twListToDF(tweets)
View(tweets.df)
tweets <- strip_retweets(searchTwitter('#netneutrality', n = 100))
head(tweets)
tweets.df <- twListToDF(tweets)
View(tweets.df)
UW <- "47.653855, -122.307815, 5mi"
tweets <- strip_retweets(searchTwitter('#netneutrality', n = 100, geocode = UW))
tweets <- strip_retweets(searchTwitter('#netneutrality', geocode = UW))
tweets <- strip_retweets(searchTwitter('#savetheinternet', geocode = UW))
UW <- "47.653855,-122.307815,5mi"
tweets <- strip_retweets(searchTwitter('#savetheinternet', geocode = UW))
tweets <- strip_retweets(searchTwitter('#savetheinternet', n=100, geocode = UW))
head(tweets)
tweets.df <- twListToDF(tweets)
View(tweets.df)
tweets <- strip_retweets(searchTwitter('#savetheinternet+#savenetneutrality', n=100, geocode = UW))
head(tweets)
UW <- "47.653855,-122.307815,20mi"
tweets <- strip_retweets(searchTwitter('#savetheinternet+#savenetneutrality', n=100, geocode = UW))
head(tweets)
tweets <- strip_retweets(searchTwitter('#savetheinternet #savenetneutrality', n=100, geocode = UW))
head(tweets)
tweets <- strip_retweets(searchTwitter('#savetheinternet|#savenetneutrality', n=100, geocode = UW))
head(tweets)
tweets.df <- twListToDF(tweets)
View(tweets.df)
tweets <- strip_retweets(searchTwitter('#savetheinternet|#savenetneutrality', n=1000, geocode = UW))
UW <- "47.653855,-122.307815,100mi"
tweets <- strip_retweets(searchTwitter('#savetheinternet|#savenetneutrality', n=1000, geocode = UW))
head(tweets)
tweets.df <- twListToDF(tweets)
View(tweets.df)
tweets <- strip_retweets(searchTwitter('#savetheinternet|#savenetneutrality', n=1000))
tweets.df <- twListToDF(tweets)
View(tweets.df)
library(maps)
?maps
US_capitals <- us.cities[us.cities$capital == 1 | us.cities$capital == 2,]
View(US_capitals)
geocodes <- paste0(US_capitals$lat, ",", US_capitals$long, ",50mi")
tweets <- strip_retweets(searchTwitter('#savetheinternet|#savenetneutrality', since = fcc_date, until = fcc_date, n=100, resultType = "popular"))
US_capitals <- us.cities[us.cities$capital == 1 | us.cities$capital == 2,]
geocodes <- paste0(US_capitals$lat, ",", US_capitals$long, ",50mi")
fcc_date <- "2018-02-22"
tweets <- strip_retweets(searchTwitter('#savetheinternet|#savenetneutrality', since = fcc_date, until = fcc_date, n=100, resultType = "popular"))
head(tweets)
tweets.df <- twListToDF(tweets)
View(tweets.df)
tweets.df <- twListToDF(tweets)
View(tweets.df)
day_after_fcc <- "2018-02-23"
tweets <- strip_retweets(searchTwitter('#savetheinternet|#savenetneutrality',
since = fcc_date,
until = day_after_fcc,
n=100,
resultType = "popular")
)
tweets.df <- twListToDF(tweets)
View(tweets.df)
